name: "PR to Main"
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  validate_pr:
    permissions:
      pull-requests: write
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1
  validate_dart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Flutter
        uses: subosito/flutter-action@v2
      - name: Install dependencies
        run: flutter pub get
      - name: Run build runner
        run: flutter pub run build_runner build --delete-conflicting-outputs
      - name: Generate l10n
        run: flutter gen-l10n
      - name: Run tests
        run: flutter test
      - name: Upload test failures
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-failures
          path: test/failures/
          if-no-files-found: ignore
      - name: Run linter
        run: flutter analyze
      - name: Configure git
        run: |
          git fetch --prune --unshallow
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@emdgroup.com"

      - name: 🔂 Run standard-version
        run: |
          npx standard-version --skip.tag --skip.commit
      - name: ⏎ Get new version
        uses: actions/github-script@v7
        id: get_new_version
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            return package.version;

      # Run Dart script to determine the expected version bump type
      - name: Run api change type detection
        id: detect_change_type
        run: |
          API_CHANGELOG=$(dart ./generators/lib/doc_comparator/doc_comparator.dart \
          ./lib/documentation.dart origin/main:./lib/documentation.dart -v)

          API_CHANGE_TYPE=$(echo "$API_CHANGELOG" | tail -n 1 | awk '{print $NF}')
          echo "API_CHANGE_TYPE=$API_CHANGE_TYPE" >> $GITHUB_ENV
          {
            echo 'API_CHANGELOG<<EOF'
            echo "$API_CHANGELOG"
            echo EOF
          } >> "$GITHUB_ENV"
  
          echo "API_CHANGELOG output:"
          echo "$API_CHANGELOG"
          echo "Detected API_CHANGE_TYPE: $API_CHANGE_TYPE"

    # Extract previous version from pubspec.yaml
      - name: Get previous version
        id: get_previous_version
        run: |
          PREVIOUS_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      # Validate that the computed version increment matches the Dart script result
      - name: Validate version bump
        id: validate_version
        run: |
          IFS='.' read -r OLD_MAJOR OLD_MINOR OLD_PATCH <<< "$PREVIOUS_VERSION"
          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "${{ steps.get_new_version.outputs.result }}"
          echo "Old version: $PREVIOUS_VERSION"
          echo "New version: ${{ steps.get_new_version.outputs.result }}"

          if [[ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]]; then
            DETECTED_CHANGE="major"
          elif [[ "$NEW_MINOR" -gt "$OLD_MINOR" ]]; then
            DETECTED_CHANGE="minor"
          else
            DETECTED_CHANGE="patch"
          fi

          echo "Expected: At least $API_CHANGE_TYPE | Detected: $DETECTED_CHANGE"

          # Define priority levels
          PRIORITY_MAP=("patch" "minor" "major")

          # Get index of expected and detected changes
          for i in "${!PRIORITY_MAP[@]}"; do
            [[ "${PRIORITY_MAP[$i]}" == "$API_CHANGE_TYPE" ]] && EXPECTED_INDEX=$i
            [[ "${PRIORITY_MAP[$i]}" == "$DETECTED_CHANGE" ]] && DETECTED_INDEX=$i
          done

          # Fail only if the detected change is LESS significant than the expected change
          if [[ "$DETECTED_INDEX" -lt "$EXPECTED_INDEX" ]]; then
            echo "❌ Version bump mismatch! Expected at least $API_CHANGE_TYPE, but detected $DETECTED_CHANGE."
            exit 1
          else
            echo "✅ Version bump is correct."
          fi

      - name: 💬 Comment on PR with new version
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: "New version ${{ steps.get_new_version.outputs.result }} 🚀\n\nDetected API changes:\n${{ env.API_CHANGELOG }}"
